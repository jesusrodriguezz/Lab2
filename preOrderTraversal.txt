// pre order traversal using recursion
public void preOrderTraversal(Node root){
      //implement me
      if(root == null){
         return;
      }
      System.out.print(root.value + ", ");
      preOrderTraversal(root.left);
      preOrderTraversal(root.right);
   }
// in order traversal using recursion
public void inOrderTraversal(Node root){
      //implement me
      if(root == null){
         return;
      }
      inOrderTraversal(root.left);
      System.out.print(root.value + ", ");
      inOrderTraversal(root.right);
   }
// post order traversal using recursion
public void postOrderTraversal(Node root){
      //implement me
      if(root == null){
         return;
      }
      postOrderTraversal(root.left);
      postOrderTraversal(root.right);
      System.out.print(root.value + ", ");

   }
public boolean find(Node root, int key){
	  //implement me
     if(root == null){
      return false;
     }
     if(root.value == key){
      return true;
     }
     if(key < root.value){
      find(root.left, key);
     }
      return find(root.right, key);
   
                 
   }
public int getMin(Node root){
      //implement me
     if(root == null){
      System.out.println("empty tree");
     }
     if(root.left == null){
      return root.value;
     }
     return getMin(root.left);

   }
public int getMax(Node root){
	  //implement me
     if(root == null){
      System.out.println("Empty tree");
     }
     if(root.right == null){
      return root.value;
     }
     return getMax(root.right);
   }
   
